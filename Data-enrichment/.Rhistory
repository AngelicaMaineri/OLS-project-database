## 5. String match
(unique(df2$keywords)%in%unique(domains$discipline))
df_enriched = left_join(df2, domains, by=c("keywords" = "discipline"))
count(df_enriched, domain)
df_dom = left_join(df, df_enriched, by="id", multiple = "any") |>
dplyr::select(!keywords.y, !row) |>
rename(keywords = keywords.x) |>
print(n=100)
col_order <- c("id", "title","participants","mentors","description","cohort", "keywords", "status", "domain")
df_dom = df_dom[, col_order]
df_dom
# export
write.csv(df_dom, file="Data/projects_domain.csv", fileEncoding = "UTF-8")
#' OLS-Project-databases
#' Assign domain
#'
#' Created on 28/04/2023 by Angelica Maineri
#'
#' Aim: write script to automatically tag the domain (SSH, LSH, NES, Other)
#' based on keywords
## 1. Load and install packages -----
# Uncomment (= remove the #) the following lines as fit:
#install.packages("tidyverse")
library(tidyverse) # for most operations
# for wordclouds
#install.packages("wordcloud")
library(wordcloud)
#install.packages("RColorBrewer")
library(RColorBrewer)
#install.packages("wordcloud2")
library(wordcloud2)
# for embeddings
#install.packages("word2vec")
library(word2vec)
## 2. Load data ----
df = read_delim("Data/projects_copied.csv")
domains = read_delim("Data/domains.csv")
df = read_delim("C:/Users/angel/Documents/GitHub/ols-program-paper/data/project.csv") # Load updated copy from the paper repo
## 2. Load data ----
df = read_delim("Data/projects_copied.csv") # Load local copy (not updated)
## 2. Load data ----
#df = read_delim("Data/projects_copied.csv") # Load local copy (not updated)
df = read_delim("C:/Users/angel/Documents/GitHub/ols-program-paper/data/project.csv") # Load updated copy from the paper repo
## 2. Load data ----
#df = read_delim("Data/projects_copied.csv") # Load local copy (not updated)
df = read_delim("C:/Users/angel/Documents/GitHub/ols-program-paper/data/projects.csv") # Load updated copy from the paper repo
domains = read_delim("Data/domains.csv")
df_people = read_delim("C:/Users/angel/Documents/GitHub/ols-program-paper/data/people.csv") # Load updated copy from the paper repo
View(df_people)
## 3. Prepare data ----
# rename name field to title
df = df |>
rename(title = name)
# add identifier for projects - OLS + cohort + number
df = df |>
group_by(cohort) |>
mutate(row = row_number()) |>
ungroup()
df = df |>
mutate(id = paste("OLS", df$cohort, df$row, sep = "-")) |>
print()
df$id
#make list of keywords, retain project ID
df2 = df |>
mutate(keywords = strsplit(keywords, ",[ ]")) |>
unnest(keywords) |>
#  group_by(id) |>
#  mutate(row = row_number()) |>
# spread(row, keywords) |>
print()
df2 = df2 |>
dplyr::select(c("keywords", "id")) |>
mutate(keywords = tolower(keywords)) |> # remove capitalization to avoid duplication
mutate(keywords = str_trim(keywords, "right")) |>  #remove all trailing whitespace
mutate(keywords = str_trim(keywords, "left")) |> #remove all leading whitespace
print(n=100)
# make list of unique keywords, remove duplicates
(list = unique(df2$keywords))
# with occurrences
df3 = df2 |>
mutate(n=1) |>
dplyr::select("keywords", "n") |>
group_by(keywords) |>
count(n) |>
ungroup() |>
print()
# remove capitalisation
domains = domains |>
mutate(discipline=tolower(discipline))
(listdf3 = unique(df3$keywords))
## 4. Wordcloud -----
set.seed(42) # for reproducibility
## 5. String match
(unique(df2$keywords)%in%unique(domains$discipline))
df_enriched = left_join(df2, domains, by=c("keywords" = "discipline"))
count(df_enriched, domain)
df_dom = left_join(df, df_enriched, by="id", multiple = "any") |>
dplyr::select(!keywords.y, !row) |>
rename(keywords = keywords.x) |>
print(n=100)
col_order <- c("id", "title","participants","mentors","description","cohort", "keywords", "status", "domain")
df_dom = df_dom[, col_order]
df_dom
# export
write.csv(df_dom, file="Data/projects_domain.csv", fileEncoding = "UTF-8")
rm()
? rm
rm(list = ls())
## 2. Load data ----
df = read_delim("Data/projects_domain.cs") # Load data with added domain
setwd("C:/Users/angel/Documents/GitHub/OLS-project-database/Data-enrichment")
## 2. Load data ----
df = read_delim("Data/projects_domain.cs") # Load data with added domain
## 2. Load data ----
df = read_delim("Data/projects_domain.csv") # Load data with added domain
df_people = read_delim("C:/Users/angel/Documents/GitHub/ols-program-paper/data/people.csv") # Load updated copy from the paper repo
View(df_people)
View(df)
colnames(df_people)
colnames(df_people)[1]
## 3. data prep
colnames(df_people)[1] = c("githandle") |> #rename firs col
## 4. Merge
#select only fullname and github handle
df_people_small = df_people |>
select()
## 3. data prep
colnames(df_people)[1] = c("githandle") #rename firs col
colnames(df_people)
#select only fullname and github handle
df_people_small = df_people |>
select(githandle, first-name, last-name)
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
colnames()
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name"))
df_people_small
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste(c("first-name", "last-name")))
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste0(c("first-name", "last-name")))
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste("first-name", "last-name"))
df_people_small
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste(first-name, last-name, sep = '[ ]'))
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste(`first-name`, `last-name`, sep = '[ ]'))
df_people_small
df_people_small
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste(`first-name`, `last-name`, sep = ' '))
df_people_small
#select only fullname and github handle
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste(`first-name`, `last-name`, sep = ' ')) |>
mutate(gitfull = paste("https://github.com/", githandle, sep = ''))
df_people_small
# long format df to merge names
df
unique(df$participants) %in% unique(df_people_small$name)
unique(df$mentors) %in% unique(df_people_small$name)
# split participants
df = df |>
separate(participants, into = c("part1", "part2", "part3", "part4", "part5", "part6"), sep=",[ ]" ) |>
print(n=100)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df
foreach r in (1:nrow(df)){
foreach c in (1:6) {
print(r)
print(i)
}
}
foreach r in (1:nrow(df)){
foreach c in (1:6) {
print("r")
print("i")
}
}
nrow(df)
foreach r in (1:nrow(df)){
foreach c in (1:6) {
print(r)
print(c)
}
}
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df
foreach r in (1:nrow(df)){
foreach c in (1:6) {
print(r)
print(c)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
print(r)
print(c)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c)
print(var)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
print(var)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
df[r, var]
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
(df[r, var])
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
paste(df$var)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
print(df$var)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
count(df$var)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
count(df, var)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
count(df, var)
}}
for(r in 1:nrow(df)){
for(c in (1:6)) {
var = paste("part", c, sep = "")
print(var)
}}
try = left_join(df, df_people_small, by=c("part1" = "fullname"))
try = left_join(df, df_people_small, by=c("part1" = "name"))
try
View(try)
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste(`first-name`, `last-name`, sep = ' ')) |>
mutate(gitfull = paste("https://github.com/", githandle, sep = ''))  |>
select(c("name", "gitfull"))
df_people_small
try = left_join(df, df_people_small, by=c("part1" = "name"))
try
# long format
df = df |>
gather(participant, part1:part6, factor_key=TRUE) |>
print(n=50)
# long format
df2 = df |>
gather(participant, part1:part6, factor_key=TRUE) |>
print(n=50)
# long format
df2 = df |>
gather(participant, part1:part6) |>
print(n=50)
# long format
df2 = df |>
gather(partnum, name, part1:part6, factor_key=TRUE) |>
print(n=50)
View(df2)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df2
try = left_join(df2, df_people_small, by=c("name")
try
try = left_join(df2, df_people_small, by=c("name"))
try
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
temp = left_join(df_long, df_people_small, by=c("name"))
temp
View(temp)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = ""))
df_long
View(df_long)
# back to wide format
df = spread(df, partnum, name)
# back to wide format
df_wide = spread(df_long, partnum, name)
df_wide
df_wide = df_wide |>
mutate(participants = paste(part1:part6, sep=", "))
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", "))
df_wide
View(df_long)
View(df_wide)
? paste
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", collapse = TRUE))
# back to wide format
df_wide = spread(df_long, partnum, name)
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", collapse = TRUE))
df_wide
# back to wide format
df_wide = spread(df_long, partnum, name)
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", collapse = TRUE))
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", "))
df_wide$participants
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
## 2. Load data ----
df = read_delim("Data/projects_domain.csv") # Load data with added domain
df_people = read_delim("C:/Users/angel/Documents/GitHub/ols-program-paper/data/people.csv") # Load updated copy from the paper repo
## 3. data prep
colnames(df_people)[1] = c("githandle") #rename firs col
## 4. Merge
#select only first and last names and github handle
#create full name (NAME) in df_people
#create full gitlINK (GITFULL) in df_people
df_people_small = df_people |>
select(c("githandle", "first-name", "last-name")) |>
mutate(name = paste(`first-name`, `last-name`, sep = ' ')) |>
mutate(gitfull = paste("https://github.com/", githandle, sep = ''))  |>
select(c("name", "gitfull"))
df_people_small
# split participants
df = df |>
separate(participants, into = c("part1", "part2", "part3", "part4", "part5", "part6"), sep=",[ ]" ) |>
print(n=100)
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = ""))
df_long
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = ""))
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = "")) |>
filter(name!="[NA](NA)")
df_long
# back to wide format
df_wide = spread(df_long, partnum, name)
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", "))
df_wide$participants
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = "")) |>
filter(name!="[NA](NA)")
df_long
# back to wide format
df_wide = spread(df_long, partnum, name)
# back to wide format
df_wide = spread(df_long, ID, name)
# back to wide format
df_wide = spread(df_long, id, name)
df_long
# back to wide format
df_long$id <- factor(df_long$id)
df_wide = spread(df_long, partnum, name)
df_wide
? spread
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = "")) |>
filter(name!="[NA](NA)") |>
group_by(id)
df_long
# back to wide format
df_long$id <- factor(df_long$id)
df_wide = spread(df_long, partnum, name)
df_wide
View(df_wide)
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = "")) |>
filter(name!="[NA](NA)")
df_long
# back to wide format
df_long$id <- factor(df_long$id)
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name)
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = "")) |>
filter(name!="[NA](NA)") |>
select(-c("gitfull"))
df_long
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name)
df_wide = df_wide
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", "))
df_wide$participants
? paste
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name)
df_wide = df_wide |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", recycle0=TRUE ))
df_wide$participants
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name) |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", recycle0=TRUE ))
df_wide$participants
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name) |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", collapse="," ))
df_wide$participants
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name) |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", "))
df_wide$participants
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name) |>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", na.rm = FALSE))
df_wide$participants
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name) |>
mutate(participants = unite(part1, part2, part3, part4, part5, part6, sep=", ", na.rm = TRUE))
# back to wide format
df_long$id <- factor(df_long$id)
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name)
# long format
df_long = df |>
gather(partnum, name, part1:part6, factor_key=TRUE)
# if df$part1-6 in df_people_small, then change string to [df_part1-6](gitfull)
df_long = left_join(df_long, df_people_small, by=c("name"))
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = "")) |>
select(-c("gitfull"))
gc()
df_long$name[df_long$name=="[NA](NA)"] = ""
df_long
# back to wide format
df_long$id <- factor(df_long$id)
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name)
df_wide = df_wide|>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", na.rm = TRUE))
df_wide$participants
df_wide = df_long |>
pivot_wider(names_from = partnum, values_from = name)
df_wide2 = df_wide|>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", ", collapse))
df_wide2 = df_wide|>
mutate(participants = paste(part1, part2, part3, part4, part5, part6, sep=", "))
df_wide2$participants
df_long = df_long |>
mutate(name = paste("[", name, "](", gitfull, ")", sep = "")) |>
select(-c("gitfull")) |>
filter(name!="[NA](NA)")
